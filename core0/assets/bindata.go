// Code generated by go-bindata.
// sources:
// scripts/network.sh
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _scriptsNetworkSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x54\x5d\x6b\x1b\x49\x10\x7c\x56\xff\x8a\xf2\x6a\xb1\x2c\xee\xf6\x24\x0b\x0e\xee\x64\x64\x38\xb8\xe3\x12\x42\x70\x48\xfc\x14\xe3\xc0\x78\xb7\x65\x75\xb4\x9a\x59\xcd\x8c\x24\x7f\xfe\xf7\x30\xfb\xa5\x15\x44\x86\xa0\x17\x4d\x6f\x4f\x75\x57\x57\x4d\xf7\x4f\x46\x77\xa2\x47\x6e\x41\x8e\x3d\x12\x26\xea\x7f\xfa\xe7\xfa\xdd\x6c\xe4\x57\xc5\xe8\x2b\x5b\x73\x2d\x6c\xaf\x34\x8f\xa6\x71\x88\x93\x76\x5a\xad\x78\x16\x9f\x71\xba\x30\x88\xcf\xf1\x02\x6f\x11\x85\x5f\x12\x0d\xe9\x89\xad\xd1\xec\x67\x51\x3c\x89\xca\xc3\xc2\xac\x78\x16\x95\x68\xe1\xe8\x85\x6d\x12\x62\x49\x5c\x21\x45\x44\x7d\xea\xc3\x29\x2d\xfe\x11\xe9\x82\xd3\x25\xf5\x49\xe6\xb8\x41\xf2\x84\xa8\xc9\xc2\xed\x05\xfc\x82\x35\x01\x40\x59\x3a\xba\x49\x6e\xb1\x12\xe7\x44\xdf\x23\xe4\xb8\x42\xa5\x8c\x0a\xb3\xcc\x7a\x10\x8f\x73\x9a\x4b\x55\x41\xb4\x78\x51\xb9\x3c\x89\xbe\xa7\x3e\xd5\x18\xbf\xdd\x1e\x7c\x40\xa6\x78\x65\x34\xe6\xc6\xee\x31\xa7\xa8\xbb\xc0\x59\xdc\x50\x1a\x56\xec\x4a\x3a\x46\x33\x92\x62\x8c\xa8\xfd\x1a\x61\x72\x89\x51\xc6\xdb\x91\xde\xe4\x39\x4e\xa9\x82\x2d\x24\x9b\xc5\x27\x44\x34\xdf\xe8\xd4\x8b\xd1\x48\x73\x56\x7a\x53\xe0\x99\x7a\xfb\x86\xca\x60\x68\x66\x53\x44\xd4\x5b\x4a\x9e\x23\x6e\x01\xa8\x67\x57\x48\xec\xbc\x5b\x8d\x7a\x25\xd7\x31\xbd\x12\x79\xab\x8a\x16\xf6\xcb\xfb\xff\xaf\xff\xfb\xfc\xb1\x1a\xc0\x4e\x89\x0f\xa8\x81\x5b\x4d\xd3\x1b\xdc\x31\x2c\xab\xec\x91\xfa\xb4\x5b\x48\xce\x38\x41\x4b\x2c\xcd\x05\xc9\xbf\x6d\x1d\xe4\xe2\xbc\x66\xbf\x33\x76\xe9\x30\xb9\x3c\x0d\xe2\xdf\x5b\x2e\xf0\x6d\x32\x1e\xa3\xc3\xf8\x02\x99\x29\x35\x70\x39\x73\x81\xf1\x1f\x13\xca\x8c\x66\xea\x4c\xbd\xee\xa0\x1d\x3e\x67\x53\x14\x92\x75\x98\xd6\xce\xf8\x6e\xa4\x1c\x46\x5d\xf8\x40\x3a\xcb\xeb\x0d\xbb\x92\x95\xca\x32\xcb\xce\x55\xca\x55\xa9\x53\xc4\xb5\x1d\x23\xb2\xbc\x9e\xc5\x67\x47\x99\x85\x22\x6d\xf6\x90\x3a\xfe\xab\x7d\x6e\x79\xdd\x25\x3b\x3c\x66\xc8\x54\x69\x6d\x7c\x85\xb7\x6f\xc3\xf2\x3a\x2a\x8d\xb8\x6f\xbd\x51\x23\x35\x5a\x73\xea\x65\x2b\xfe\x31\xfa\x45\x09\xea\x86\x06\x57\x1f\x06\xcd\xff\x86\xc3\x9b\x6a\xfc\x59\xab\x91\x29\xaf\xde\x9a\xca\xcf\x8a\xb5\x05\x5e\xe0\x95\xe4\x48\xce\xab\x47\x2f\x73\x95\xee\xd7\x42\x40\xc6\x0b\xd4\x6e\x89\xc1\x33\x0a\x2b\xda\x23\xfe\x0b\xaf\x83\x2a\x39\x88\xf5\x76\xee\xdf\x78\x0d\x9c\xd2\x8d\x47\x92\xfd\x8e\x64\x8e\xc9\xb0\x3b\xbe\xba\xad\x66\x7c\xc1\x3d\x71\x83\x8c\xad\xa8\xea\x54\x36\x55\xfb\x68\xbf\x22\xc4\x99\x5c\x85\xe7\x77\xe0\xa5\xd4\xb2\xf2\x07\xbb\x24\x22\x29\x90\x23\xec\xc5\x8c\xb7\x1d\xc4\x50\x5d\xbb\x66\x2b\x84\xac\x2a\xc0\x0f\x9c\xb6\xbb\xe2\xd8\xdd\x4d\x71\xfc\x82\x0a\x36\xee\x10\x39\xbc\x4a\x14\x4c\x43\xf5\xe3\xa6\x1f\x01\x00\x00\xff\xff\xa2\x6a\x71\x5d\xba\x05\x00\x00")

func scriptsNetworkShBytes() ([]byte, error) {
	return bindataRead(
		_scriptsNetworkSh,
		"scripts/network.sh",
	)
}

func scriptsNetworkSh() (*asset, error) {
	bytes, err := scriptsNetworkShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/network.sh", size: 1466, mode: os.FileMode(420), modTime: time.Unix(1481806900, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"scripts/network.sh": scriptsNetworkSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"scripts": &bintree{nil, map[string]*bintree{
		"network.sh": &bintree{scriptsNetworkSh, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

