// Code generated by go-bindata.
// sources:
// scripts/network.sh
// scripts/stat.lua
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _scriptsNetworkSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x54\x5d\x6b\x1b\x49\x10\x7c\x56\xff\x8a\xf2\x6a\xb1\x2c\xee\xf6\x24\x0b\x0e\xee\x64\x64\x38\xb8\xe3\x12\x42\x70\x48\xfc\x14\xe3\xc0\x78\xb7\x65\x75\xb4\x9a\x59\xcd\x8c\x24\x7f\xfe\xf7\x30\xfb\xa5\x15\x44\x86\xa0\x17\x4d\x6f\x4f\x75\x57\x57\x4d\xf7\x4f\x46\x77\xa2\x47\x6e\x41\x8e\x3d\x12\x26\xea\x7f\xfa\xe7\xfa\xdd\x6c\xe4\x57\xc5\xe8\x2b\x5b\x73\x2d\x6c\xaf\x34\x8f\xa6\x71\x88\x93\x76\x5a\xad\x78\x16\x9f\x71\xba\x30\x88\xcf\xf1\x02\x6f\x11\x85\x5f\x12\x0d\xe9\x89\xad\xd1\xec\x67\x51\x3c\x89\xca\xc3\xc2\xac\x78\x16\x95\x68\xe1\xe8\x85\x6d\x12\x62\x49\x5c\x21\x45\x44\x7d\xea\xc3\x29\x2d\xfe\x11\xe9\x82\xd3\x25\xf5\x49\xe6\xb8\x41\xf2\x84\xa8\xc9\xc2\xed\x05\xfc\x82\x35\x01\x40\x59\x3a\xba\x49\x6e\xb1\x12\xe7\x44\xdf\x23\xe4\xb8\x42\xa5\x8c\x0a\xb3\xcc\x7a\x10\x8f\x73\x9a\x4b\x55\x41\xb4\x78\x51\xb9\x3c\x89\xbe\xa7\x3e\xd5\x18\xbf\xdd\x1e\x7c\x40\xa6\x78\x65\x34\xe6\xc6\xee\x31\xa7\xa8\xbb\xc0\x59\xdc\x50\x1a\x56\xec\x4a\x3a\x46\x33\x92\x62\x8c\xa8\xfd\x1a\x61\x72\x89\x51\xc6\xdb\x91\xde\xe4\x39\x4e\xa9\x82\x2d\x24\x9b\xc5\x27\x44\x34\xdf\xe8\xd4\x8b\xd1\x48\x73\x56\x7a\x53\xe0\x99\x7a\xfb\x86\xca\x60\x68\x66\x53\x44\xd4\x5b\x4a\x9e\x23\x6e\x01\xa8\x67\x57\x48\xec\xbc\x5b\x8d\x7a\x25\xd7\x31\xbd\x12\x79\xab\x8a\x16\xf6\xcb\xfb\xff\xaf\xff\xfb\xfc\xb1\x1a\xc0\x4e\x89\x0f\xa8\x81\x5b\x4d\xd3\x1b\xdc\x31\x2c\xab\xec\x91\xfa\xb4\x5b\x48\xce\x38\x41\x4b\x2c\xcd\x05\xc9\xbf\x6d\x1d\xe4\xe2\xbc\x66\xbf\x33\x76\xe9\x30\xb9\x3c\x0d\xe2\xdf\x5b\x2e\xf0\x6d\x32\x1e\xa3\xc3\xf8\x02\x99\x29\x35\x70\x39\x73\x81\xf1\x1f\x13\xca\x8c\x66\xea\x4c\xbd\xee\xa0\x1d\x3e\x67\x53\x14\x92\x75\x98\xd6\xce\xf8\x6e\xa4\x1c\x46\x5d\xf8\x40\x3a\xcb\xeb\x0d\xbb\x92\x95\xca\x32\xcb\xce\x55\xca\x55\xa9\x53\xc4\xb5\x1d\x23\xb2\xbc\x9e\xc5\x67\x47\x99\x85\x22\x6d\xf6\x90\x3a\xfe\xab\x7d\x6e\x79\xdd\x25\x3b\x3c\x66\xc8\x54\x69\x6d\x7c\x85\xb7\x6f\xc3\xf2\x3a\x2a\x8d\xb8\x6f\xbd\x51\x23\x35\x5a\x73\xea\x65\x2b\xfe\x31\xfa\x45\x09\xea\x86\x06\x57\x1f\x06\xcd\xff\x86\xc3\x9b\x6a\xfc\x59\xab\x91\x29\xaf\xde\x9a\xca\xcf\x8a\xb5\x05\x5e\xe0\x95\xe4\x48\xce\xab\x47\x2f\x73\x95\xee\xd7\x42\x40\xc6\x0b\xd4\x6e\x89\xc1\x33\x0a\x2b\xda\x23\xfe\x0b\xaf\x83\x2a\x39\x88\xf5\x76\xee\xdf\x78\x0d\x9c\xd2\x8d\x47\x92\xfd\x8e\x64\x8e\xc9\xb0\x3b\xbe\xba\xad\x66\x7c\xc1\x3d\x71\x83\x8c\xad\xa8\xea\x54\x36\x55\xfb\x68\xbf\x22\xc4\x99\x5c\x85\xe7\x77\xe0\xa5\xd4\xb2\xf2\x07\xbb\x24\x22\x29\x90\x23\xec\xc5\x8c\xb7\x1d\xc4\x50\x5d\xbb\x66\x2b\x84\xac\x2a\xc0\x0f\x9c\xb6\xbb\xe2\xd8\xdd\x4d\x71\xfc\x82\x0a\x36\xee\x10\x39\xbc\x4a\x14\x4c\x43\xf5\xe3\xa6\x1f\x01\x00\x00\xff\xff\xa2\x6a\x71\x5d\xba\x05\x00\x00")

func scriptsNetworkShBytes() ([]byte, error) {
	return bindataRead(
		_scriptsNetworkSh,
		"scripts/network.sh",
	)
}

func scriptsNetworkSh() (*asset, error) {
	bytes, err := scriptsNetworkShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/network.sh", size: 1466, mode: os.FileMode(420), modTime: time.Unix(1482243566, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _scriptsStatLua = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x56\x6d\x6b\xe4\xb6\x13\x7f\xef\x4f\x31\x18\x42\x76\x13\xdb\xf1\xe6\xee\x9f\x17\xc7\xdf\x85\xd2\x86\xeb\xd1\x16\x8e\xe4\x5a\x5a\x8e\x10\x14\x7b\x6c\xa9\xb1\xa5\x3d\x49\xde\xcd\xd2\xeb\x77\x2f\x92\x6c\xad\xbd\xb6\xaf\xa5\x50\xa8\x31\x58\x9e\xd1\x3c\xfd\x34\x0f\x8a\xe3\x67\x3c\x44\x3b\x52\xb7\x18\x29\x2d\x57\x5c\xec\xd7\x91\x3e\x6c\x31\xd2\xa4\x52\x41\x50\x8b\x9c\xd4\xf0\x8c\x07\xc8\xe0\xfb\xdb\x5f\xef\x3f\x6e\x1e\x3a\x9a\x95\x81\x0c\xb4\xe0\x6d\xf3\x84\x72\xf5\xf5\xdd\xdb\x9f\x3f\x6e\x1e\xd6\x1d\x9f\x8b\xfd\x84\x7b\xed\xb9\xc6\x04\x64\x60\xa9\xaf\x7a\x95\xc6\x64\x4f\x7c\xfd\xe0\xf5\x14\x7e\xe7\xff\x1e\x7a\x8f\x94\x26\x1a\x9d\x5b\x4a\x4b\xc6\xab\xa4\x14\xb2\x21\x7a\x15\x1a\x8e\x7a\x73\x66\xde\x30\xb2\xd2\x91\xf1\x7f\x1d\x04\x71\x0c\x4e\x98\x2a\xd4\x5f\x94\xed\x04\x7b\x67\x77\x90\xc1\xef\x7f\x74\x3f\x39\x64\x10\x86\x03\x37\xba\xe5\x56\xa2\xd9\x27\xb1\x60\x2a\xc9\x49\x5d\xaf\xce\xdf\xde\x7e\x38\x8f\xbc\xab\xeb\xe0\x88\xcc\xa3\xa2\x42\xea\xc7\x06\x32\x58\x35\x44\xd3\xa4\xac\x85\xb0\xe8\xc3\x15\xbc\x4a\xd3\x35\x5c\xb8\xcf\xa5\xf9\x4c\xe4\xe8\xbc\xdc\x4d\x27\x78\xd3\x49\xde\xa4\x69\x6f\xb3\x60\x65\x89\x12\xb9\x66\xa4\x36\xc7\x62\xe1\xcf\x20\xfc\x36\x0c\x02\x56\x3a\xe7\x35\x45\x1e\x00\x00\xc4\x31\x54\xa8\x2d\x91\x89\x56\xb9\xa3\x8e\x80\x69\xc0\x17\xa6\xb4\x02\xc6\x81\x00\x7d\xc6\x83\xdd\x6e\xc2\xce\x7f\x53\x82\x27\x05\xe6\xa2\xc0\x95\x11\x5c\x5b\xd6\xd1\xf8\xc9\xaf\x66\x0d\x06\xbd\xb1\x9c\xd4\x79\x5b\x13\x8d\xc6\x05\xc3\x86\x3d\x45\x0e\xe4\x49\x89\xba\xd5\x08\x5c\x2a\x20\x12\xa1\x16\x55\x85\x05\x60\x52\x25\xf0\x74\xd0\x08\xb9\x68\xb9\x46\x09\xa5\x90\xc0\x51\xef\x85\x7c\xb6\x3a\x59\x39\x0e\xd8\x47\xd6\x19\xf4\x0e\x99\xc7\xfc\x40\xd6\xe5\x73\x0c\xbb\x64\x47\xea\x11\xd3\xf8\x0a\x99\x4d\x68\xc3\xc6\xad\xc8\xe9\x50\xdb\xd1\x7d\xab\x6a\x8b\x12\x14\xe6\x82\x17\x89\xdf\x65\x72\x00\x32\xc7\xbf\x3a\x02\x60\x58\x58\x2b\x3c\xdd\x67\x7d\x71\x5c\x5e\x78\x98\xbe\xa1\x98\x3f\x9b\xd8\xf6\x08\x39\xe1\x50\xd6\xad\xa2\x16\x32\x7f\x52\xa4\xaa\x24\x56\x44\x63\xe1\x74\xa8\x24\xe8\x01\xd9\x25\xcd\xa3\x75\x1d\xfe\x3f\xca\xc0\x53\x6c\x36\xd0\x98\xe3\xed\x14\x31\x71\x64\xba\xd3\x93\xb6\xae\x4f\x0a\xe7\x4c\x7d\x36\x6f\xfb\xf9\xac\xf4\x6f\x18\x79\x49\xf3\xf8\x4a\x8c\x8e\xae\xb8\xe2\x70\x04\xb2\xab\xdc\xa2\x21\x2f\x6e\xa1\x85\x26\xf5\x3a\xf0\x5a\x06\xa5\x15\xde\xbd\xff\xe9\xfe\xbb\x30\x82\xf0\x53\x8b\x2d\xaa\x37\xae\x72\x1b\xc6\xc3\xc8\x78\x38\x90\xf2\x9a\x20\x83\x74\x44\xe5\x72\x42\x6a\xc8\xcb\x08\xfe\x9e\xee\x80\xcb\x86\xc0\xf9\xe3\xf1\xf8\xd2\x19\x7c\xe9\x0c\xbe\x54\xb4\xf2\xdf\x06\x98\x9e\x02\x4c\x7b\x80\x69\x0f\x30\xfd\x07\x00\x1b\xd7\x67\x10\xa6\xb3\x08\xd3\x29\xc2\x74\x01\x61\x3a\x83\x30\x9d\x14\x80\xc4\x06\xcd\x30\xb1\x39\x9f\xb7\xd2\x94\xf7\x40\x95\xad\xdc\x91\xf2\xae\x58\x9d\xda\x5e\x8d\xd7\xd2\x6b\x68\x90\xa8\xd6\x50\xb9\x8e\x80\xf0\xe2\xa4\x1f\x91\x5d\x75\x65\xbc\x36\x4d\xa6\x61\xdc\x34\xa4\xa1\x85\xe6\xb1\x26\x4a\xdb\x13\x23\x3a\x38\xcd\xb8\xe3\xfa\x72\xbc\xc1\x42\xd3\x2d\x2e\x61\xe3\xe9\x64\x57\x8d\xc4\xae\xba\x4d\x7d\x9a\xd9\x0e\xf1\x95\x4f\xd6\x51\x76\x1d\x33\xd8\x9b\x1a\xc2\x67\xda\xa3\x8d\xc2\x44\x65\x93\x70\x8b\x92\x89\xa2\xe3\x53\x17\x08\x53\xc0\x85\x06\x89\x9f\x5a\x26\xb1\x80\xbd\x68\xeb\xc2\x92\xb6\x52\xec\x58\x81\x40\x8a\x82\x99\xbc\x25\x35\x30\x5e\x8a\xe0\x34\x07\x8e\xeb\x51\xcc\xb4\x8f\x99\x8e\x63\xa6\x3e\x66\x3a\x88\x99\xce\xc5\x4c\xe7\x62\xa6\x5f\x8a\x99\xd4\x7b\x72\x50\x20\x51\xa1\x76\xf7\x0b\xc6\x21\x27\x0a\x41\x94\x90\x53\xc2\x2b\x4c\x3a\x3f\xba\xdb\x87\xbd\xf7\x9c\x26\x1c\xe3\xae\x38\x86\x53\x8c\x68\xe2\x07\x1f\x72\x3b\xf8\xba\xa9\x37\xbc\x03\xdc\x8f\xee\x00\x91\x15\x9b\xee\xba\xfd\xe5\xfd\xbb\xbb\xdb\xd1\xc6\xeb\xd7\x17\x37\xe9\xc5\x4d\xba\x36\x8e\xe0\xcb\x96\x49\x74\x73\xb7\x20\x07\x1f\x5e\x21\xf8\xb9\x86\xca\xb4\x0c\xb1\x43\x09\xd7\x69\x1a\xa5\x69\x0a\x12\x73\x21\x0b\x75\x6a\x27\xfc\xe1\xc3\xdd\xbb\x1f\x17\xda\x66\x7c\x9d\x9a\x27\x82\x78\x33\x71\x70\x41\xb0\x6b\x07\x23\xc9\x4e\x54\xb7\x92\xdb\x60\x03\x3f\xe0\xfe\x62\x2a\x8f\x78\x56\xff\x28\xb1\x5d\x92\xa4\x7f\xa3\xaf\xbb\x74\x98\xed\xf5\xa3\xb4\x99\x6a\x5c\xea\x63\x53\x8d\xa3\xde\x36\x1a\xe1\x71\x5c\x91\x96\x54\xa8\x16\x63\x98\x8e\x17\x5f\x39\x13\xce\xd2\x40\xb2\xd6\x37\x73\xf1\x4c\x5b\xeb\x92\xf6\xe5\x66\xdc\x69\x1f\x15\xd3\xa0\xd3\xa5\x9e\xb0\x34\x17\x97\x3a\xfa\x4c\x57\x86\x85\xce\xed\x2e\xe8\xfe\x8e\x39\x2a\xcf\xff\x4a\x19\x4e\x52\x9d\x17\xc1\x9f\x01\x00\x00\xff\xff\xbe\x9c\xf3\x16\x52\x0d\x00\x00")

func scriptsStatLuaBytes() ([]byte, error) {
	return bindataRead(
		_scriptsStatLua,
		"scripts/stat.lua",
	)
}

func scriptsStatLua() (*asset, error) {
	bytes, err := scriptsStatLuaBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/stat.lua", size: 3410, mode: os.FileMode(493), modTime: time.Unix(1482302648, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"scripts/network.sh": scriptsNetworkSh,
	"scripts/stat.lua": scriptsStatLua,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"scripts": &bintree{nil, map[string]*bintree{
		"network.sh": &bintree{scriptsNetworkSh, map[string]*bintree{}},
		"stat.lua": &bintree{scriptsStatLua, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

