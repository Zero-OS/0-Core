// Code generated by go-bindata.
// sources:
// scripts/network.sh
// scripts/stat.lua
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _scriptsNetworkSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x54\x5d\x6f\xda\x4a\x10\x7d\x66\x7e\xc5\x89\xb1\x02\xe8\x5e\x5f\x3e\xa4\xfb\x42\x44\xa4\x2b\xdd\xa6\xad\xaa\x26\x55\x9b\xa7\x46\xa9\xb4\xb1\x87\x30\xc5\xec\x9a\xf5\x02\xf9\xfc\xef\xd5\xfa\x0b\x23\x95\x48\x15\x2f\xec\x7a\xe6\xcc\x9c\x39\x67\xa7\x7b\x32\xbc\x13\x3d\xcc\x17\x94\xb3\x43\xc4\x44\xdd\x2f\xff\x5d\x7f\x98\x0d\xdd\x2a\x1b\x7e\x67\x6b\xae\x85\xed\x95\xe6\xe1\x34\xf4\xf7\xa4\x73\xad\x56\x3c\x0b\xfb\x1c\x2f\x0c\xc2\x31\x5e\xe0\x2c\x02\xff\x8b\x82\x01\x3d\xb1\x35\x9a\xdd\x2c\x08\x27\x41\x71\x58\x98\x15\xcf\x82\x02\xcd\x1f\x9d\xb0\x8d\xfc\x5d\x14\x96\x48\x01\x51\x97\xba\xc8\x95\x16\xf7\x88\x78\xc1\xf1\x92\xba\x24\x73\xdc\x20\x7a\x42\x50\x47\xe1\xf6\x0c\x6e\xc1\x9a\x00\xa0\x28\x1d\xdc\x44\xb7\x58\x49\x9e\x8b\xbe\x87\x8f\xc9\x33\x15\x33\x4a\xcc\x22\xea\x41\x1c\xc6\x34\x97\xb2\x82\x68\x71\xa2\x52\x79\x12\x7d\x4f\x5d\xaa\x30\xfe\xba\x3d\xf8\x80\x44\xf1\xca\x68\xcc\x8d\xdd\x63\x4e\x51\x75\x81\x7e\x58\x53\x1a\x94\xec\x0a\x3a\x46\x33\xa2\x6c\x84\xa0\xf9\x1a\x60\x72\x8e\x61\xc2\xdb\xa1\xde\xa4\x29\x4e\xa9\x84\xcd\x24\x99\x85\x27\x44\x34\xdf\xe8\xd8\x89\xd1\x88\x53\x56\x7a\x93\xe1\x99\x3a\xfb\x86\x8a\x4b\xdf\xcc\x26\x0b\xa8\xb3\x94\x34\x45\xd8\x00\x50\xc7\xae\x10\xd9\x79\xbb\x1a\x75\x0a\xae\x23\x7a\x25\x72\x56\x65\x0d\xec\xb7\x8f\xef\xaf\xdf\x7d\xfd\x5c\x0e\x60\xa7\xc4\x79\x54\xcf\xad\xa2\xe9\x0c\xee\x18\x96\x55\xf2\x48\x5d\xda\x2d\x24\x65\x9c\xa0\x21\x16\xa7\x82\xe8\xff\xa6\x0e\x52\xc9\x9d\x66\xb7\x33\x76\x99\x63\x72\x7e\xea\xc5\xbf\xb7\x9c\xe1\xc7\x64\x34\x42\x8b\xf1\x19\x12\x53\x68\x90\xa7\xcc\x19\x46\xff\x4c\x28\x31\x9a\xa9\x35\xf5\xaa\x83\x66\xf8\x9c\x4c\x91\x49\xd2\x62\x5a\x39\xe3\xa7\x91\x62\x18\x55\xe1\x03\xe9\x2c\xaf\x37\x9c\x17\xac\x54\x92\x58\xce\xf3\x52\xb9\x32\x74\x8a\xb0\xb2\x63\x40\x96\xd7\xb3\xb0\x7f\x94\x99\x2f\xd2\x44\x0f\xa8\xe5\xbf\xca\xe7\x96\xd7\x6d\xb2\x83\x63\x86\x8c\x95\xd6\xc6\x95\x78\xfb\x36\x2c\xaf\x83\xc2\x88\xfb\xd6\x6b\x35\x62\xa3\x35\xc7\x4e\xb6\xe2\x1e\x83\x3f\x94\xa0\x6a\xa8\x77\xf5\xa9\x57\xff\xaf\x39\xbc\xa9\xc6\xbf\x95\x1a\x89\x72\xea\xad\xa9\xfc\xae\x58\x53\xe0\x05\x4e\x49\x8a\x68\x5c\x3e\x7a\x99\xab\x78\xbf\x16\x3c\x32\x5e\xa0\x76\x4b\xf4\x9e\x91\x59\xd1\x0e\x61\xff\xf2\x22\x1a\x0f\xf0\xda\x2b\x33\xbc\x62\x6f\x27\x5c\x5e\xe0\xd5\x33\x8b\x37\x0e\x51\xf2\x37\xa2\x39\x26\x03\x6a\x4f\xb1\xea\xae\x9e\xa2\x37\x51\x58\x63\x63\x2b\xaa\x3c\x15\xbd\x55\x76\xda\x6f\x0a\xc9\x4d\xaa\xfc\x2b\x3c\xb0\x54\x6c\x59\xb9\x83\x95\x12\x90\x64\x48\xe1\xd7\x63\xc2\xdb\x16\xa2\xaf\xae\xf3\x7a\x39\xf8\xa8\xf2\x82\x1f\x38\x6e\x56\xc6\xb1\xdc\x4d\x76\x3c\x41\x79\x37\xb7\x88\x1c\xa6\x12\x79\xef\x50\xf5\xc6\xe9\x57\x00\x00\x00\xff\xff\xc3\x84\x7b\x55\xc1\x05\x00\x00")

func scriptsNetworkShBytes() ([]byte, error) {
	return bindataRead(
		_scriptsNetworkSh,
		"scripts/network.sh",
	)
}

func scriptsNetworkSh() (*asset, error) {
	bytes, err := scriptsNetworkShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/network.sh", size: 1473, mode: os.FileMode(420), modTime: time.Unix(1482329816, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _scriptsStatLua = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x56\x6d\x6b\xe4\xb6\x13\x7f\xef\x4f\x31\x18\x42\x76\x13\xdb\xf1\xe6\xee\x9f\x17\xc7\xdf\x85\xd2\x86\xeb\xd1\x16\x8e\xe4\x5a\x5a\x8e\x10\x14\x7b\x6c\xa9\xb1\xa5\x3d\x49\xde\xcd\xd2\xeb\x77\x2f\x92\x6c\xad\xbd\xb6\xaf\xa5\x50\xa8\x31\x58\x9e\xd1\x3c\xfd\x34\x0f\x8a\xe3\x67\x3c\x44\x3b\x52\xb7\x18\x29\x2d\x57\x5c\xec\xd7\x91\x3e\x6c\x31\xd2\xa4\x52\x41\x50\x8b\x9c\xd4\xf0\x8c\x07\xc8\xe0\xfb\xdb\x5f\xef\x3f\x6e\x1e\x3a\x9a\x95\x81\x0c\xb4\xe0\x6d\xf3\x84\x72\xf5\xf5\xdd\xdb\x9f\x3f\x6e\x1e\xd6\x1d\x9f\x8b\xfd\x84\x7b\xed\xb9\xc6\x04\x64\x60\xa9\xaf\x7a\x95\xc6\x64\x4f\x7c\xfd\xe0\xf5\x14\x7e\xe7\xff\x1e\x7a\x8f\x94\x26\x1a\x9d\x5b\x4a\x4b\xc6\xab\xa4\x14\xb2\x21\x7a\x15\x1a\x8e\x7a\x73\x66\xde\x30\xb2\xd2\x91\xf1\x7f\x1d\x04\x71\x0c\x4e\x98\x2a\xd4\x5f\x94\xed\x04\x7b\x67\x77\x90\xc1\xef\x7f\x74\x3f\x39\x64\x10\x86\x03\x37\xba\xe5\x56\xa2\xd9\x27\xb1\x60\x2a\xc9\x49\x5d\xaf\xce\xdf\xde\x7e\x38\x8f\xbc\xab\xeb\xe0\x88\xcc\xa3\xa2\x42\xea\xc7\x06\x32\x58\x35\x44\xd3\xa4\xac\x85\xb0\xe8\xc3\x15\xbc\x4a\xd3\x35\x5c\xb8\xcf\xa5\xf9\x4c\xe4\xe8\xbc\xdc\x4d\x27\x78\xd3\x49\xde\xa4\x69\x6f\xb3\x60\x65\x89\x12\xb9\x66\xa4\x36\xc7\x62\xe1\xcf\x20\xfc\x36\x0c\x02\x56\x3a\xe7\x35\x45\x1e\x00\x00\xc4\x31\x54\xa8\x2d\x91\x89\x56\xb9\xa3\x8e\x80\x69\xc0\x17\xa6\xb4\x02\xc6\x81\x00\x7d\xc6\x83\xdd\x6e\xc2\xce\x7f\x53\x82\x27\x05\xe6\xa2\xc0\x95\x11\x5c\x5b\xd6\xd1\xf8\xc9\xaf\x66\x0d\x06\xbd\xb1\x9c\xd4\x79\x5b\x13\x8d\xc6\x05\xc3\x86\x3d\x45\x0e\xe4\x49\x89\xba\xd5\x08\x5c\x2a\x20\x12\xa1\x16\x55\x85\x05\x60\x52\x25\xf0\x74\xd0\x08\xb9\x68\xb9\x46\x09\xa5\x90\xc0\x51\xef\x85\x7c\xb6\x3a\x59\x39\x0e\xd8\x47\xd6\x19\xf4\x0e\x99\xc7\xfc\x40\xd6\xe5\x73\x0c\xbb\x64\x47\xea\x11\xd3\xf8\x0a\x99\x4d\x68\xc3\xc6\xad\xc8\xe9\x50\xdb\xd1\x7d\xab\x6a\x8b\x12\x14\xe6\x82\x17\x89\xdf\x65\x72\x00\x32\xc7\xbf\x3a\x02\x60\x58\x58\x2b\x3c\xdd\x67\x7d\x71\x5c\x5e\x78\x98\xbe\xa1\x98\x3f\x9b\xd8\xf6\x08\x39\xe1\x50\xd6\xad\xa2\x16\x32\x7f\x52\xa4\xaa\x24\x56\x44\x63\xe1\x74\xa8\x24\xe8\x01\xd9\x25\xcd\xa3\x75\x1d\xfe\x3f\xca\xc0\x53\x6c\x36\xd0\x98\xe3\xed\x14\x31\x71\x64\xba\xd3\x93\xb6\xae\x4f\x0a\xe7\x4c\x7d\x36\x6f\xfb\xf9\xac\xf4\x6f\x18\x79\x49\xf3\xf8\x4a\x8c\x8e\xae\xb8\xe2\x70\x04\xb2\xab\xdc\xa2\x21\x2f\x6e\xa1\x85\x26\xf5\x3a\xf0\x5a\x06\xa5\x15\xde\xbd\xff\xe9\xfe\xbb\x30\x82\xf0\x53\x8b\x2d\xaa\x37\xae\x72\x1b\xc6\xc3\xc8\x78\x38\x90\xf2\x9a\x20\x83\x74\x44\xe5\x72\x42\x6a\xc8\xcb\x08\xfe\x9e\xee\x80\xcb\x86\xc0\xf9\xe3\xf1\xf8\xd2\x19\x7c\xe9\x0c\xbe\x54\xb4\xf2\xdf\x06\x98\x9e\x02\x4c\x7b\x80\x69\x0f\x30\xfd\x07\x00\x1b\xd7\x67\x10\xa6\xb3\x08\xd3\x29\xc2\x74\x01\x61\x3a\x83\x30\x9d\x14\x80\xc4\x06\xcd\x30\xb1\x39\x9f\xb7\xd2\x94\xf7\x40\x95\xad\xdc\x91\xf2\xae\x58\x9d\xda\x5e\x8d\xd7\xd2\x6b\x68\x90\xa8\xd6\x50\xb9\x8e\x80\xf0\xe2\xa4\x1f\x91\x5d\x75\x65\xbc\x36\x4d\xa6\x61\xdc\x34\xa4\xa1\x85\xe6\xb1\x26\x4a\xdb\x13\x23\x3a\x38\xcd\xb8\xe3\xfa\x72\xbc\xc1\x42\xd3\x2d\x2e\x61\xe3\xe9\x64\x57\x8d\xc4\xae\xba\x4d\x7d\x9a\xd9\x0e\xf1\x95\x4f\xd6\x51\x76\x1d\x33\xd8\x9b\x1a\xc2\x67\xda\xa3\x8d\xc2\x44\x65\x93\x70\x8b\x92\x89\xa2\xe3\x53\x17\x08\x53\xc0\x85\x06\x89\x9f\x5a\x26\xb1\x80\xbd\x68\xeb\xc2\x92\xb6\x52\xec\x58\x81\x40\x8a\x82\x99\xbc\x25\x35\x30\x5e\x8a\xe0\x34\x07\x8e\xeb\x51\xcc\xb4\x8f\x99\x8e\x63\xa6\x3e\x66\x3a\x88\x99\xce\xc5\x4c\xe7\x62\xa6\x5f\x8a\x99\xd4\x7b\x72\x50\x20\x51\xa1\x76\xf7\x0b\xc6\x21\x27\x0a\x41\x94\x90\x53\xc2\x2b\x4c\x3a\x3f\xba\xdb\x87\xbd\xf7\x9c\x26\x1c\xe3\xae\x38\x86\x53\x8c\x68\xe2\x07\x1f\x72\x3b\xf8\xba\xa9\x37\xbc\x03\xdc\x8f\xee\x00\x91\x15\x9b\xee\xba\xfd\xe5\xfd\xbb\xbb\xdb\xd1\xc6\xeb\xd7\x17\x37\xe9\xc5\x4d\xba\x36\x8e\xe0\xcb\x96\x49\x74\x73\xb7\x20\x07\x1f\x5e\x21\xf8\xb9\x86\xca\xb4\x0c\xb1\x43\x09\xd7\x69\x1a\xa5\x69\x0a\x12\x73\x21\x0b\x75\x6a\x27\xfc\xe1\xc3\xdd\xbb\x1f\x17\xda\x66\x7c\x9d\x9a\x27\x82\x78\x33\x71\x70\x41\xb0\x6b\x07\x23\xc9\x4e\x54\xb7\x92\xdb\x60\x03\x3f\xe0\xfe\x62\x2a\x8f\x78\x56\xff\x28\xb1\x5d\x92\xa4\x7f\xa3\xaf\xbb\x74\x98\xed\xf5\xa3\xb4\x99\x6a\x5c\xea\x63\x53\x8d\xa3\xde\x36\x1a\xe1\x71\x5c\x91\x96\x54\xa8\x16\x63\x98\x8e\x17\x5f\x39\x13\xce\xd2\x40\xb2\xd6\x37\x73\xf1\x4c\x5b\xeb\x92\xf6\xe5\x66\xdc\x69\x1f\x15\xd3\xa0\xd3\xa5\x9e\xb0\x34\x17\x97\x3a\xfa\x4c\x57\x86\x85\xce\xed\x2e\xe8\xfe\x8e\x39\x2a\xcf\xff\x4a\x19\x4e\x52\x9d\x17\xc1\x9f\x01\x00\x00\xff\xff\xbe\x9c\xf3\x16\x52\x0d\x00\x00")

func scriptsStatLuaBytes() ([]byte, error) {
	return bindataRead(
		_scriptsStatLua,
		"scripts/stat.lua",
	)
}

func scriptsStatLua() (*asset, error) {
	bytes, err := scriptsStatLuaBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/stat.lua", size: 3410, mode: os.FileMode(493), modTime: time.Unix(1482329917, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"scripts/network.sh": scriptsNetworkSh,
	"scripts/stat.lua": scriptsStatLua,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"scripts": &bintree{nil, map[string]*bintree{
		"network.sh": &bintree{scriptsNetworkSh, map[string]*bintree{}},
		"stat.lua": &bintree{scriptsStatLua, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

